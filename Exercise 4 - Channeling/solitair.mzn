include "globals.mzn";
array[int,int] of int: layout; %input shuffled deck
int: num_cards = 52; %number of cards in the deck
int: num_combos = 8; %possible allowable next cards (ie rank(i) +/- 1)
int: cards_per_group = 3;%number of cards in each grouping of cards
set of int: cards=1..num_cards; %List of all possible card indexes

%Lookup table for finding possible allowable next cards from current card
array[1..num_cards*num_combos,1..2] of int: valid_ranks = array2d(1..num_cards*num_combos,1..2, [
1,13,
1,26,
1,39,
1,52,
1,2,
1,15,
1,28,
1,31,
2,1,
2,14,
2,27,
2,40,
2,3,
2,16,
2,29,
2,42,
3,2,
3,15,
3,28,
3,41,
3,4,
3,17,
3,30,
3,43,
4,3,
4,16,
4,29,
4,42,
4,5,
4,18,
4,31,
4,44,
5,4,
5,17,
5,30,
5,43,
5,6,
5,19,
5,32,
5,45,
6,5,
6,18,
6,31,
6,44,
6,7,
6,20,
6,33,
6,46,
7,6,
7,19,
7,32,
7,45,
7,8,
7,21,
7,34,
7,47,
8,7,
8,20,
8,33,
8,46,
8,9,
8,22,
8,35,
8,48,
9,8,
9,21,
9,34,
9,47,
9,10,
9,23,
9,36,
9,49,
10,9,
10,22,
10,35,
10,48,
10,11,
10,24,
10,37,
10,50,
11,10,
11,23,
11,36,
11,49,
11,12,
11,25,
11,38,
11,51,
12,11,
12,24,
12,37,
12,50,
12,13,
12,26,
12,39,
12,52,
13,12,
13,25,
13,38,
13,51,
13,14,
13,27,
13,40,
13,1,
14,13,
14,26,
14,39,
14,52,
14,2,
14,15,
14,28,
14,31,
15,1,
15,14,
15,27,
15,40,
15,3,
15,16,
15,29,
15,42,
16,2,
16,15,
16,28,
16,41,
16,4,
16,17,
16,30,
16,43,
17,3,
17,16,
17,29,
17,42,
17,5,
17,18,
17,31,
17,44,
18,4,
18,17,
18,30,
18,43,
18,6,
18,19,
18,32,
18,45,
19,5,
19,18,
19,31,
19,44,
19,7,
19,20,
19,33,
19,46,
20,6,
20,19,
20,32,
20,45,
20,8,
20,21,
20,34,
20,47,
21,7,
21,20,
21,33,
21,46,
21,9,
21,22,
21,35,
21,48,
22,8,
22,21,
22,34,
22,47,
22,10,
22,23,
22,36,
22,49,
23,9,
23,22,
23,35,
23,48,
23,11,
23,24,
23,37,
23,50,
24,10,
24,23,
24,36,
24,49,
24,12,
24,25,
24,38,
24,51,
25,11,
25,24,
25,37,
25,50,
25,13,
25,26,
25,39,
25,52,
26,12,
26,25,
26,38,
26,51,
26,14,
26,27,
26,40,
26,1,
27,13,
27,26,
27,39,
27,52,
27,2,
27,15,
27,28,
27,31,
28,1,
28,14,
28,27,
28,40,
28,3,
28,16,
28,29,
28,42,
29,2,
29,15,
29,28,
29,41,
29,4,
29,17,
29,30,
29,43,
30,3,
30,16,
30,29,
30,42,
30,5,
30,18,
30,31,
30,44,
31,4,
31,17,
31,30,
31,43,
31,6,
31,19,
31,32,
31,45,
32,5,
32,18,
32,31,
32,44,
32,7,
32,20,
32,33,
32,46,
33,6,
33,19,
33,32,
33,45,
33,8,
33,21,
33,34,
33,47,
34,7,
34,20,
34,33,
34,46,
34,9,
34,22,
34,35,
34,48,
35,8,
35,21,
35,34,
35,47,
35,10,
35,23,
35,36,
35,49,
36,9,
36,22,
36,35,
36,48,
36,11,
36,24,
36,37,
36,50,
37,10,
37,23,
37,36,
37,49,
37,12,
37,25,
37,38,
37,51,
38,11,
38,24,
38,37,
38,50,
38,13,
38,26,
38,39,
38,52,
39,12,
39,25,
39,38,
39,51,
39,14,
39,27,
39,40,
39,1,
40,13,
40,26,
40,39,
40,52,
40,2,
40,15,
40,28,
40,31,
41,1,
41,14,
41,27,
41,40,
41,3,
41,16,
41,29,
41,42,
42,2,
42,15,
42,28,
42,41,
42,4,
42,17,
42,30,
42,43,
43,3,
43,16,
43,29,
43,42,
43,5,
43,18,
43,31,
43,44,
44,4,
44,17,
44,30,
44,43,
44,6,
44,19,
44,32,
44,45,
45,5,
45,18,
45,31,
45,44,
45,7,
45,20,
45,33,
45,46,
46,6,
46,19,
46,32,
46,45,
46,8,
46,21,
46,34,
46,47,
47,7,
47,20,
47,33,
47,46,
47,9,
47,22,
47,35,
47,48,
48,8,
48,21,
48,34,
48,47,
48,10,
48,23,
48,36,
48,49,
49,9,
49,22,
49,35,
49,48,
49,11,
49,24,
49,37,
49,50,
50,10,
50,23,
50,36,
50,49,
50,12,
50,25,
50,38,
50,51,
51,11,
51,24,
51,37,
51,50,
51,13,
51,26,
51,39,
51,52,
52,12,
52,25,
52,38,
52,51,
52,14,
52,27,
52,40,
52,1]);


array[1..num_cards] of var cards: X; %X[i] = card in position i

constraint forall(g in 1..17, s in 1..3)(X[1] != layout[g,s]); %ensure first card is the card missing from the shuffled layout
%constraint X[1] ==1;
constraint alldifferent(X); %ensure all cards are used
constraint forall(g in 1..17)( %value_precede for each grouping of cards (top card must appear before middle card must appear before bottom card in group)
                  forall(s in 1..cards_per_group-1)(
                    value_precede(layout[g,s],layout[g,s+1],X)
                   )
                  );
constraint forall(c in cards where c != num_cards)(%use lookup table to ensure subsequent cards are rank +/- 1 of current card
                        table([X[c],X[c+1]],valid_ranks)
                  );
                
solve satisfy;
output [show(X)]

/*Discussion
Although cumbersome, the lookup table was the only feasble method for any solver to generate a solution. Using complicated modulo and dividing formulas caused all solvers to run indefinitely. The precomputed lookup table allows the default solvers to efficiently compute a solution to the problem
*/



